{"version":3,"sources":["components/header/header.component.jsx","redux/planner/planner.types.js","redux/planner/planner.actions.js","redux/planner/planner.selector.js","components/form-input/form-input.component.jsx","components/map-container/map-container.component.jsx","components/route-card/route-card.component.jsx","pages/homepage/homepage.component.jsx","App.js","redux/planner/planner.reducer.js","redux/drawer/drawer.reducer.js","redux/root-reducer.js","redux/planner/planner.sagas.js","redux/root-saga.js","redux/store.js","index.js","redux/drawer/drawer.action.js","redux/drawer/drawer.types.js","components/left-drawer/left-drawer.component.jsx","redux/drawer/drawer.selectors.js"],"names":["useStyles","makeStyles","theme","loginButton","marginLeft","menuButton","marginRight","spacing","mapStateToProps","createStructuredSelector","connect","dispatch","toggleDrawer","props","classes","Fragment","AppBar","position","className","appBar","Toolbar","IconButton","edge","onClick","Typography","variant","Button","color","PlannerActionTypes","AUTOCOMPLETE_START","AUTOCOMPLETE_SUCCESS","AUTOCOMPLETE_FAILURE","SET_ORIGIN","SET_DEST","DIRECTIONS_START","DIRECTIONS_SUCCESS","DIRECTIONS_FAILURE","autocompleteSuccess","places","source","type","payload","selectPlanner","state","planner","selectOriginPlaces","createSelector","originList","selectOriginPredictions","map","place","description","selectDestPlaces","destList","selectDestPredictions","selectOrigin","origin","selectDest","dest","selectDirections","directions","selectRoutes","routes","selectPolylines","route","overview_path","path","lat","lng","card","padding","input","width","switchButton","right","top","submitButton","height","originPredictions","destPredictions","startAutocomplete","autocompleteStart","setOrigin","setDest","startDirections","directionsStart","Card","Fab","Grid","container","direction","alignItems","item","Autocomplete","freeSolo","options","renderInput","params","TextField","label","onInputChange","event","value","id","defaultValue","InputLabelProps","shrink","clsx","containerStyle","zIndex","center","polylines","google","window","initialCenter","zoom","disableDefaultUI","polyline","index","key","strokeColor","strokeWeight","RouteCard","steps","CardContent","step","instructions","travel_mode","transit","line","short_name","stepToDescription","paperContainer","overflowY","breakpoints","down","Paper","elevation","legs","Hidden","xsDown","App","CssBaseline","INITIAL_STATE","plannerReducer","action","open","drawerReducer","DrawerActionTypes","TOGGLE_DRAWER","rootReducer","combineReducers","drawer","autocomplete","getDirections","onAutoCompleteStart","onDirectionsStart","plannerSagas","put","service","maps","AutocompleteService","promise","Promise","resolve","reject","getPlacePredictions","location","LatLng","radius","predictions","status","PlacesServiceStatus","OK","response","filter","includes","error","directionsService","DirectionsService","destination","travelMode","provideRouteAlternatives","transitOptions","modes","region","call","console","log","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","list","selectDrawerOpen","iOS","process","browser","test","navigator","userAgent","anchor","onClose","onOpen","disableBackdropTransition","disableDiscovery","role","onKeyDown","button","primary"],"mappings":"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","file":"static/js/main.7b50890b.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, IconButton, Toolbar, Typography, Hidden, Tabs, Tab, makeStyles } from '@material-ui/core';\nimport  MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toggleDrawer } from '../../redux/drawer/drawer.action';\n\nconst useStyles = makeStyles((theme) => ({\n  loginButton: {\n    marginLeft: 'auto'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nfunction Header(props) {\n  const { toggleDrawer } = props;\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} onClick={toggleDrawer}>\n            <MenuIcon />\n          </IconButton>\n        <Typography variant=\"h6\">Dublin Bus</Typography>\n        <Button className={classes.loginButton} color=\"inherit\">Login</Button>\n      </Toolbar>\n    </AppBar>\n    <Toolbar />\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDrawer: () => dispatch(toggleDrawer())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","const PlannerActionTypes = {\n  AUTOCOMPLETE_START: 'AUTOCOMPLETE_START',\n  AUTOCOMPLETE_SUCCESS: 'AUTOCOMPLETE_SUCCESS',\n  AUTOCOMPLETE_FAILURE: 'AUTOCOMPLETE_FAILURE',\n  SET_ORIGIN: 'SET_ORIGIN',\n  SET_DEST: 'SET_DEST',\n  DIRECTIONS_START: 'DIRECTIONS_START',\n  DIRECTIONS_SUCCESS: 'DIRECTIONS_SUCCESS',\n  DIRECTIONS_FAILURE: 'DIRECTIONS_FAILURE',\n};\n\nexport default PlannerActionTypes;","import PlannerActionTypes from './planner.types';\n\nexport const autocompleteStart = (input, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_START,\n  payload: { input, source }\n});\n\nexport const autocompleteSuccess = (places, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_SUCCESS,\n  payload: { places, source }\n});\n\nexport const autocompleteFailure = error => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_FAILURE,\n  payload: error\n});\n\nexport const setOrigin = origin => ({\n  type: PlannerActionTypes.SET_ORIGIN,\n  payload: origin\n});\n\nexport const setDest = dest => ({\n  type: PlannerActionTypes.SET_DEST,\n  payload: dest\n});\n\nexport const directionsStart = (origin, dest) => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: {\n    origin: origin,\n    dest: dest\n  }\n});\n\nexport const directionsSuccess = directions => ({\n  type: PlannerActionTypes.DIRECTIONS_SUCCESS,\n  payload: directions\n});\n\nexport const directionsFailure = error => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: error\n});\n","import { createSelector } from 'reselect';\n\nconst selectPlanner = state => state.planner;\n\nexport const selectOriginPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.originList\n);\n\nexport const selectOriginPredictions = createSelector(\n  [selectOriginPlaces],\nplaces => places.map(place => place.description)\n);\n\nexport const selectDestPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.destList\n);\n\nexport const selectDestPredictions = createSelector(\n  [selectDestPlaces],\n  places => places.map(place => place.description)\n);\n\nexport const selectOrigin = createSelector(\n  [selectPlanner],\n  planner => planner.origin\n);\n\nexport const selectDest = createSelector(\n  [selectPlanner],\n  planner => planner.dest\n);\n\nexport const selectDirections = createSelector(\n  [selectPlanner] ,\n  planner => planner.directions\n);\n\nexport const selectRoutes = createSelector(\n  [selectDirections],\n  directions => (directions ? directions.routes : [])\n);\n\nexport const selectPolylines = createSelector(\n  [selectRoutes],\n  routes => routes.map(route => route.overview_path.map(path => ({ lat: path.lat(), lng: path.lng() })))\n);","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { autocompleteStart, setDest, setOrigin, directionsStart } from '../../redux/planner/planner.actions';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  selectDest, selectDestPredictions,\n  selectOrigin,\n  selectOriginPredictions,\n} from '../../redux/planner/planner.selector';\nimport Card from '@material-ui/core/Card';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles({\n  card: {\n    padding: '16px 0'\n  },\n  input: {\n    width: '320px',\n  },\n  switchButton: {\n    position: 'absolute',\n    right: '8px',\n    top: '50px'\n  },\n  submitButton: {\n    height: '56px'\n  }\n});\n\nfunction FormInput(props) {\n  const { startAutocomplete, setOrigin, setDest, originPredictions, destPredictions, startDirections, origin, dest } = props;\n\n  const classes = useStyles();\n\n  function originHandler(event, value) {\n    setOrigin(value);\n    startAutocomplete(value, 'origin');\n  }\n\n  function destHandler(event, value) {\n    setDest(value);\n    startAutocomplete(value, 'dest');\n  }\n\n  return (\n    <Card variant=\"outlined\" className={classes.card}>\n      <Fab color=\"primary\" className={classes.switchButton}>\n        <ImportExportIcon />\n      </Fab>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={1}>\n        <Grid item>\n          <Autocomplete\n            freeSolo\n            options={originPredictions}\n            renderInput={params => <TextField {...params} label=\"Origin\" variant=\"outlined\" />}\n            onInputChange={originHandler}\n            className={classes.input}\n          />\n        </Grid>\n        <Grid item>\n          <Autocomplete\n            freeSolo\n            options={destPredictions}\n            renderInput={params => <TextField {...params} label=\"Destination\" variant=\"outlined\" />}\n            onInputChange={destHandler}\n            className={classes.input}\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            id=\"datetime-local\"\n            label=\"Depart at\"\n            type=\"datetime-local\"\n            defaultValue=\"2017-05-24T10:30\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            className={classes.input}\n          />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => startDirections(origin, dest)}\n                  className={clsx(classes.input, classes.submitButton)}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  originPredictions: selectOriginPredictions,\n  destPredictions: selectDestPredictions,\n  origin: selectOrigin,\n  dest: selectDest\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startAutocomplete: (input, source) => dispatch(autocompleteStart(input, source)),\n  setOrigin: origin => dispatch(setOrigin(origin)),\n  setDest: dest => dispatch(setDest(dest)),\n  startDirections: (origin, dest) => dispatch(directionsStart(origin, dest)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormInput);","import React from 'react';\n\n// import { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { GoogleApiWrapper, Map, Polyline } from 'google-maps-react';\nimport { createStructuredSelector } from 'reselect';\nimport { selectPolylines } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\n\n// const apiKey = 'AIzaSyBPyIqf7hOMSCjqSq--50UKiJ9Xzmbssmk';\n\nconst containerStyle = {\n  position: 'fixed',\n  height: '100vh',\n  width: '100vw',\n  zIndex: -1\n};\n\nconst center = {\n  lat: 53.3363,\n  lng: -6.2769\n};\n\n\nfunction MapContainer(props) {\n  const { polylines } = props;\n  return(\n    <Map google={window.google} containerStyle={containerStyle} initialCenter={center} zoom={13} disableDefaultUI={true}>\n      { polylines.map((polyline, index) => <Polyline key={index} path={polyline} strokeColor=\"#BBBDBF\" strokeWeight={6}/>) }\n    </Map>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  polylines: selectPolylines\n});\n\nexport default connect(mapStateToProps)(MapContainer);\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nfunction RouteCard(props) {\n  const { steps } = props;\n\n  function stepToDescription(step) {\n    let instructions = step.instructions;\n    if (step.travel_mode==='TRANSIT') {\n      instructions += ', ' + step.transit.line.short_name;\n    }\n    return instructions;\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        { steps.map((step, index) => (<Typography key={index}>{stepToDescription(step)}</Typography>)) }\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default RouteCard;","import React from 'react';\nimport FormInput from '../../components/form-input/form-input.component';\nimport MapContainer from '../../components/map-container/map-container.component';\nimport Hidden from '@material-ui/core/Hidden';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRoutes } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\nimport RouteCard from '../../components/route-card/route-card.component';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  paperContainer: {\n    width: '400px',\n    position: 'fixed',\n    height: '100vh',\n    overflowY: 'auto',\n    [theme.breakpoints.down('xs')]: {\n      width: '100vw'\n    }\n  }\n}));\n\nfunction HomePage(props) {\n  const { routes } = props;\n\n  const classes = useStyles();\n  return (\n    <>\n      <Paper elevation={10} className={classes.paperContainer} spacing={1}>\n          <FormInput/>\n          { routes.map((route, index) => (<RouteCard key={index} steps={route.legs[0].steps}/>) ) }\n      </Paper>\n      <Hidden xsDown>\n        <MapContainer />\n      </Hidden>\n      </>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  routes: selectRoutes,\n});\n\nexport default connect(mapStateToProps)(HomePage);","import React, { useEffect, useState } from 'react';\n\nimport { CssBaseline } from '@material-ui/core';\n\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport LeftDrawer from './components/left-drawer/left-drawer.component';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Header />\n      <HomePage />\n      <LeftDrawer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import PlannerActionTypes from './planner.types';\n\nconst INITIAL_STATE = {\n  originList: [],\n  destList: [],\n  origin: '',\n  dest: '',\n  directions: null,\n};\n\nconst plannerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PlannerActionTypes.AUTOCOMPLETE_SUCCESS:\n      if (action.payload.source === 'origin') {\n        return {\n          ...state,\n          originList: action.payload.places\n        }\n      } else {\n        return {\n          ...state,\n          destList: action.payload.places\n        }\n      }\n    case PlannerActionTypes.SET_ORIGIN:\n      return {\n        ...state,\n        origin: action.payload\n      };\n    case PlannerActionTypes.SET_DEST:\n      return {\n        ...state,\n        dest: action.payload\n      };\n    case PlannerActionTypes.DIRECTIONS_SUCCESS:\n      return {\n        ...state,\n        directions: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default plannerReducer;\n","import DrawerActionTypes from './drawer.types';\n\nconst INITIAL_STATE = {\n  open: false\n};\n\nconst drawerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case DrawerActionTypes.TOGGLE_DRAWER:\n      return {\n        ...state,\n        open: !state.open\n      };\n    default:\n      return state;\n  }\n}\n\nexport default drawerReducer;","import { combineReducers } from 'redux';\n\nimport plannerReducer from './planner/planner.reducer';\nimport drawerReducer from './drawer/drawer.reducer';\n\nconst rootReducer = combineReducers({\n  planner: plannerReducer,\n  drawer: drawerReducer\n});\n\nexport default rootReducer;","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport PlannerActionTypes from './planner.types';\nimport { autocompleteFailure, autocompleteSuccess, directionsFailure, directionsSuccess } from './planner.actions';\n\n\nfunction* autocomplete({ payload: { input, source } }) {\n  if (input === \"\") {\n    yield put(autocompleteSuccess([]));\n  } else {\n    const service = new window.google.maps.places.AutocompleteService();\n    const promise = new Promise((resolve, reject) => {\n      service.getPlacePredictions({ input: input, location: new window.google.maps.LatLng({ lat: 53.4321, lng: -6.2759 }), radius: 11000 }, (predictions, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(predictions);\n        } else {\n          reject(status);\n        }\n      })\n    });\n\n    try {\n      const response = yield promise;\n      const places = response\n        .filter(places => places.description.includes('Dublin'));\n\n      yield put(autocompleteSuccess(places, source));\n    } catch(error) {\n      yield put(autocompleteFailure(error));\n    }\n  }\n}\n\nfunction* getDirections({ payload: { origin, dest } }) {\n  const directionsService = new window.google.maps.DirectionsService();\n  const promise = new Promise((resolve, reject) => {\n       directionsService.route({origin: origin, destination: dest, travelMode: 'TRANSIT', provideRouteAlternatives: true, transitOptions: {modes: ['BUS']}, region: 'ie'},\n         (response, status) => {\n            if (status === 'OK') {\n              resolve(response);\n            } else {\n              reject(status);\n            }\n         });\n  });\n\n  try {\n    const routes = yield promise;\n    yield call(console.log, routes);\n    yield put(directionsSuccess(routes));\n  } catch (error) {\n    yield put(directionsFailure(error));\n  }\n}\n\nexport function* onAutoCompleteStart() {\n  yield takeLatest(PlannerActionTypes.AUTOCOMPLETE_START, autocomplete);\n}\n\nexport function* onDirectionsStart() {\n  yield takeLatest(PlannerActionTypes.DIRECTIONS_START, getDirections);\n}\n\nexport function* plannerSagas() {\n  yield all([call(onAutoCompleteStart), call(onDirectionsStart)]);\n}","import { all, call } from 'redux-saga/effects';\nimport { plannerSagas } from './planner/planner.sagas';\n\nfunction* rootSaga() {\n  yield all([call(plannerSagas)]);\n}\n\nexport default rootSaga;","import createSagaMiddleware from 'redux-saga';\n\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport  { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n","import DrawerActionTypes from './drawer.types';\n\nexport const toggleDrawer = () => ({\n  type: DrawerActionTypes.TOGGLE_DRAWER\n});","const DrawerActionTypes = {\n  TOGGLE_DRAWER: 'TOGGLE_DRAWER'\n};\n\nexport default DrawerActionTypes;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { selectDrawerOpen } from '../../redux/drawer/drawer.selectors';\nimport { toggleDrawer } from '../../redux/drawer/drawer.action';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport BookmarksIcon from '@material-ui/icons/Bookmarks';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  }\n});\n\nfunction LeftDrawer(props) {\n  const { open, toggleDrawer } = props;\n\n  const classes = useStyles();\n\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  const list = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer}\n      onKeyDown={toggleDrawer}\n    >\n      <List>\n        <ListItem button>\n          <ListItemIcon>\n            <BookmarksIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Saved\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <AccessTimeIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Timetables\" />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n\n  const anchor = 'left';\n  return (\n      <React.Fragment>\n        <SwipeableDrawer\n          anchor={'left'}\n          open={open}\n          onClose={toggleDrawer}\n          onOpen={toggleDrawer}\n          disableBackdropTransition={!iOS}\n          disableDiscovery={iOS}\n        >\n          {list()}\n        </SwipeableDrawer>\n      </React.Fragment>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  open: selectDrawerOpen\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDrawer: () => dispatch(toggleDrawer())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftDrawer);","import { createSelector } from 'reselect';\n\nconst selectDrawer = state => state.drawer;\n\nexport const selectDrawerOpen = createSelector(\n  [selectDrawer],\n  drawer => drawer.open\n);"],"sourceRoot":""}