{"version":3,"sources":["components/header/header.component.jsx","redux/planner/planner.types.js","redux/planner/planner.actions.js","redux/planner/planner.selector.js","components/form-input/form-input.component.jsx","components/map-container/map-container.component.jsx","components/route-card/route-card.component.jsx","pages/homepage/homepage.component.jsx","App.js","redux/planner/planner.reducer.js","redux/drawer/drawer.reducer.js","redux/root-reducer.js","redux/planner/planner.sagas.js","redux/root-saga.js","redux/store.js","index.js","redux/drawer/drawer.action.js","redux/drawer/drawer.types.js","components/left-drawer/left-drawer.component.jsx","redux/drawer/drawer.selectors.js"],"names":["useStyles","makeStyles","theme","loginButton","marginLeft","menuButton","marginRight","spacing","mapStateToProps","createStructuredSelector","connect","dispatch","toggleDrawer","props","classes","Fragment","AppBar","position","className","appBar","Toolbar","IconButton","edge","onClick","Typography","variant","Button","color","PlannerActionTypes","AUTOCOMPLETE_START","AUTOCOMPLETE_SUCCESS","AUTOCOMPLETE_FAILURE","SET_ORIGIN","SET_DEST","DIRECTIONS_START","DIRECTIONS_SUCCESS","DIRECTIONS_FAILURE","SWITCH_AUTOCOMPLETE_OPTIONS","SELECT_ROUTE","autocompleteSuccess","places","source","type","payload","selectPlanner","state","planner","selectOriginPlaces","createSelector","originList","selectOriginPredictions","map","place","description","selectDestPlaces","destList","selectDestPredictions","selectOrigin","origin","selectDest","dest","selectDirections","directions","selectRoutes","routes","selectPolylines","route","overview_path","path","lat","lng","selectSelectedRoute","selectedRoute","card","padding","input","width","switchButton","right","top","submitButton","height","originPredictions","destPredictions","startAutocomplete","autocompleteStart","setOrigin","setDest","startDirections","directionsStart","switchAutocompleteOptions","Card","Fab","switchOriginDest","Grid","container","direction","alignItems","item","Autocomplete","freeSolo","options","inputValue","renderInput","params","TextField","label","onInputChange","event","value","id","defaultValue","dayjs","format","InputLabelProps","shrink","clsx","containerStyle","zIndex","center","polylines","selectRoute","routeId","google","window","initialCenter","zoom","disableDefaultUI","polyline","index","key","strokeColor","strokeWeight","RouteCard","steps","CardContent","step","instructions","travel_mode","transit","line","short_name","stepToDescription","paperContainer","overflowX","overflowY","breakpoints","down","overflow","Paper","elevation","legs","Hidden","xsDown","App","CssBaseline","INITIAL_STATE","plannerReducer","action","temp","open","drawerReducer","DrawerActionTypes","TOGGLE_DRAWER","rootReducer","combineReducers","drawer","autocomplete","getDirections","onAutoCompleteStart","onDirectionsStart","plannerSagas","put","service","maps","AutocompleteService","promise","Promise","resolve","reject","getPlacePredictions","location","LatLng","radius","predictions","status","PlacesServiceStatus","OK","response","filter","includes","error","directionsService","DirectionsService","destination","travelMode","provideRouteAlternatives","transitOptions","modes","region","call","console","log","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","list","selectDrawerOpen","iOS","process","browser","test","navigator","userAgent","anchor","onClose","onOpen","disableBackdropTransition","disableDiscovery","role","onKeyDown","button","primary"],"mappings":"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","file":"static/js/main.5e9ba19e.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, IconButton, Toolbar, Typography, Hidden, Tabs, Tab, makeStyles } from '@material-ui/core';\nimport  MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { toggleDrawer } from '../../redux/drawer/drawer.action';\n\nconst useStyles = makeStyles((theme) => ({\n  loginButton: {\n    marginLeft: 'auto'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nfunction Header(props) {\n  const { toggleDrawer } = props;\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} onClick={toggleDrawer}>\n            <MenuIcon />\n          </IconButton>\n        <Typography variant=\"h6\">Dublin Bus</Typography>\n        <Button className={classes.loginButton} color=\"inherit\">Login</Button>\n      </Toolbar>\n    </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDrawer: () => dispatch(toggleDrawer())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","const PlannerActionTypes = {\n  AUTOCOMPLETE_START: 'AUTOCOMPLETE_START',\n  AUTOCOMPLETE_SUCCESS: 'AUTOCOMPLETE_SUCCESS',\n  AUTOCOMPLETE_FAILURE: 'AUTOCOMPLETE_FAILURE',\n  SET_ORIGIN: 'SET_ORIGIN',\n  SET_DEST: 'SET_DEST',\n  DIRECTIONS_START: 'DIRECTIONS_START',\n  DIRECTIONS_SUCCESS: 'DIRECTIONS_SUCCESS',\n  DIRECTIONS_FAILURE: 'DIRECTIONS_FAILURE',\n  SWITCH_AUTOCOMPLETE_OPTIONS: 'SWITCH_AUTOCOMPLETE_OPTIONS',\n  SELECT_ROUTE: 'SELECT_ROUTE'\n};\n\nexport default PlannerActionTypes;","import PlannerActionTypes from './planner.types';\n\nexport const autocompleteStart = (input, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_START,\n  payload: { input, source }\n});\n\nexport const autocompleteSuccess = (places, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_SUCCESS,\n  payload: { places, source }\n});\n\nexport const autocompleteFailure = error => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_FAILURE,\n  payload: error\n});\n\nexport const setOrigin = origin => ({\n  type: PlannerActionTypes.SET_ORIGIN,\n  payload: origin\n});\n\nexport const setDest = dest => ({\n  type: PlannerActionTypes.SET_DEST,\n  payload: dest\n});\n\nexport const directionsStart = (origin, dest) => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: {\n    origin: origin,\n    dest: dest\n  }\n});\n\nexport const directionsSuccess = directions => ({\n  type: PlannerActionTypes.DIRECTIONS_SUCCESS,\n  payload: directions\n});\n\nexport const directionsFailure = error => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: error\n});\n\nexport const switchAutocompleteOptions = () => ({\n  type: PlannerActionTypes.SWITCH_AUTOCOMPLETE_OPTIONS\n});\n\nexport const selectRoute = routeId => ({\n  type: PlannerActionTypes.SELECT_ROUTE,\n  payload: routeId\n});\n","import { createSelector } from 'reselect';\n\nconst selectPlanner = state => state.planner;\n\nexport const selectOriginPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.originList\n);\n\nexport const selectOriginPredictions = createSelector(\n  [selectOriginPlaces],\nplaces => places.map(place => place.description)\n);\n\nexport const selectDestPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.destList\n);\n\nexport const selectDestPredictions = createSelector(\n  [selectDestPlaces],\n  places => places.map(place => place.description)\n);\n\nexport const selectOrigin = createSelector(\n  [selectPlanner],\n  planner => planner.origin\n);\n\nexport const selectDest = createSelector(\n  [selectPlanner],\n  planner => planner.dest\n);\n\nexport const selectDirections = createSelector(\n  [selectPlanner] ,\n  planner => planner.directions\n);\n\nexport const selectRoutes = createSelector(\n  [selectDirections],\n  directions => (directions ? directions.routes : [])\n);\n\nexport const selectPolylines = createSelector(\n  [selectRoutes],\n  routes => routes.map(route => route.overview_path.map(path => ({ lat: path.lat(), lng: path.lng() })))\n);\n\nexport const selectSelectedRoute = createSelector(\n  [selectPlanner],\n  planner => planner.selectedRoute\n);","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport {\n  autocompleteStart,\n  setDest,\n  setOrigin,\n  directionsStart,\n  switchAutocompleteOptions\n} from '../../redux/planner/planner.actions';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  selectDest, selectDestPredictions,\n  selectOrigin,\n  selectOriginPredictions,\n} from '../../redux/planner/planner.selector';\nimport Card from '@material-ui/core/Card';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport * as dayjs from 'dayjs';\n\nconst useStyles = makeStyles({\n  card: {\n    padding: '16px 0'\n  },\n  input: {\n    width: '320px',\n  },\n  switchButton: {\n    position: 'absolute',\n    right: '8px',\n    top: '50px'\n  },\n  submitButton: {\n    height: '56px'\n  }\n});\n\nfunction FormInput(props) {\n  const { startAutocomplete,\n          setOrigin,\n          setDest,\n          originPredictions,\n          destPredictions,\n          startDirections,\n          origin,\n          dest,\n          switchAutocompleteOptions\n        } = props;\n\n  const classes = useStyles();\n\n  function localTimeToISOString() {\n    return dayjs().format('YYYY-MM-DDTHH:mm:ss');\n  }\n\n  function originHandler(event, value) {\n    setOrigin(value);\n    startAutocomplete(value, 'origin');\n  }\n\n  function destHandler(event, value) {\n    setDest(value);\n    startAutocomplete(value, 'dest');\n  }\n\n  function switchOriginDest(origin, dest) {\n    setDest(origin);\n    setOrigin(dest);\n    switchAutocompleteOptions();\n  }\n\n  return (\n    <Card variant=\"outlined\" className={classes.card}>\n      <Fab color=\"primary\" className={classes.switchButton} onClick={() => switchOriginDest(origin, dest)}>\n        <ImportExportIcon />\n      </Fab>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={1}>\n        <Grid item>\n          <Autocomplete\n            freeSolo\n            options={originPredictions}\n            inputValue={origin}\n            renderInput={params => <TextField {...params} label=\"Origin\" variant=\"outlined\" />}\n            onInputChange={originHandler}\n            className={classes.input}\n          />\n        </Grid>\n        <Grid item>\n          <Autocomplete\n            freeSolo\n            options={destPredictions}\n            inputValue={dest}\n            renderInput={params => <TextField {...params} label=\"Destination\" variant=\"outlined\" />}\n            onInputChange={destHandler}\n            className={classes.input}\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            id=\"datetime-local\"\n            label=\"Depart at\"\n            type=\"datetime-local\"\n            defaultValue={localTimeToISOString()}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            className={classes.input}\n          />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => startDirections(origin, dest)}\n                  className={clsx(classes.input, classes.submitButton)}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  originPredictions: selectOriginPredictions,\n  destPredictions: selectDestPredictions,\n  origin: selectOrigin,\n  dest: selectDest\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startAutocomplete: (input, source) => dispatch(autocompleteStart(input, source)),\n  setOrigin: origin => dispatch(setOrigin(origin)),\n  setDest: dest => dispatch(setDest(dest)),\n  startDirections: (origin, dest) => dispatch(directionsStart(origin, dest)),\n  switchAutocompleteOptions: () => dispatch(switchAutocompleteOptions())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormInput);","import React from 'react';\n\n// import { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { GoogleApiWrapper, Map, Polyline } from 'google-maps-react';\nimport { createStructuredSelector } from 'reselect';\nimport { selectPolylines, selectSelectedRoute } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\nimport { selectRoute } from '../../redux/planner/planner.actions';\n\n// const apiKey = 'AIzaSyBPyIqf7hOMSCjqSq--50UKiJ9Xzmbssmk';\n\nconst containerStyle = {\n  position: 'fixed',\n  height: '100vh',\n  width: '100vw',\n  zIndex: -1\n};\n\nconst center = {\n  lat: 53.3363,\n  lng: -6.2769\n};\n\n\nfunction MapContainer(props) {\n  const { polylines, selectRoute, selectedRoute } = props;\n  return(\n    <Map google={window.google} containerStyle={containerStyle} initialCenter={center} zoom={13} disableDefaultUI={true}>\n      { polylines.map((polyline, index) => <Polyline key={index} path={polyline} zIndex={index === selectedRoute ? 1 : 0} strokeColor={index === selectedRoute ? '#669DF6' : '#BBBDBF'} strokeWeight={6} onClick={() => selectRoute(index)}/>) }\n    </Map>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  polylines: selectPolylines,\n  selectedRoute: selectSelectedRoute\n});\n\nconst mapDispatchToProps = dispatch => ({\n  selectRoute: routeId => dispatch(selectRoute(routeId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapContainer);\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nfunction RouteCard(props) {\n  const { steps } = props;\n\n  function stepToDescription(step) {\n    let instructions = step.instructions;\n    if (step.travel_mode === 'TRANSIT') {\n      instructions += ', ' + step.transit.line.short_name;\n    }\n    return instructions;\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent >\n        { steps.map((step, index) => (<Typography key={index}>{stepToDescription(step)}</Typography>)) }\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default RouteCard;","import React from 'react';\nimport FormInput from '../../components/form-input/form-input.component';\nimport MapContainer from '../../components/map-container/map-container.component';\nimport Hidden from '@material-ui/core/Hidden';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRoutes } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\nimport RouteCard from '../../components/route-card/route-card.component';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nconst useStyles = makeStyles(theme => ({\n  paperContainer: {\n    position: 'fixed',\n    width: '400px',\n    height: 'calc(100% - 64px)',\n    overflowX: 'hidden',\n    overflowY: 'auto',\n    [theme.breakpoints.down('xs')]: {\n      position: 'relative',\n      width: '100%',\n      height: 'calc(100% - 48px)',\n      overflow: 'visible'\n    }\n  }\n}));\n\nfunction HomePage(props) {\n  const { routes } = props;\n\n  const classes = useStyles();\n  return (\n    <>\n      <Paper elevation={0} className={classes.paperContainer}>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <FormInput />\n          </Grid>\n          {routes.map((route, index) => (<Grid item key={index}><RouteCard steps={route.legs[0].steps} /> </Grid>))}\n        </Grid>\n      </Paper>\n      <Hidden xsDown>\n        <MapContainer />\n      </Hidden>\n    </>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  routes: selectRoutes,\n});\n\nexport default connect(mapStateToProps)(HomePage);","import React, { useEffect, useState } from 'react';\n\nimport { CssBaseline, IconButton, Toolbar } from '@material-ui/core';\n\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport LeftDrawer from './components/left-drawer/left-drawer.component';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { toggleDrawer } from './redux/drawer/drawer.action';\nimport { connect } from 'react-redux';\n\nfunction App(props) {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Header />\n      <HomePage />\n      <LeftDrawer />\n    </React.Fragment>\n  );\n}\nexport default App;\n","import PlannerActionTypes from './planner.types';\n\nconst INITIAL_STATE = {\n  originList: [],\n  destList: [],\n  origin: '',\n  dest: '',\n  directions: null,\n  selectedRoute: 0\n};\n\nconst plannerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PlannerActionTypes.AUTOCOMPLETE_SUCCESS:\n      if (action.payload.source === 'origin') {\n        return {\n          ...state,\n          originList: action.payload.places\n        }\n      } else {\n        return {\n          ...state,\n          destList: action.payload.places\n        }\n      }\n    case PlannerActionTypes.SET_ORIGIN:\n      return {\n        ...state,\n        origin: action.payload\n      };\n    case PlannerActionTypes.SET_DEST:\n      return {\n        ...state,\n        dest: action.payload\n      };\n    case PlannerActionTypes.DIRECTIONS_SUCCESS:\n      return {\n        ...state,\n        directions: action.payload\n      };\n    case PlannerActionTypes.SWITCH_AUTOCOMPLETE_OPTIONS:\n      const temp = state.destList;\n      return {\n        ...state,\n        destList: state.originList,\n        originList: temp\n      };\n    case PlannerActionTypes.SELECT_ROUTE:\n      return {\n        ...state,\n        selectedRoute: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default plannerReducer;\n","import DrawerActionTypes from './drawer.types';\n\nconst INITIAL_STATE = {\n  open: false\n};\n\nconst drawerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case DrawerActionTypes.TOGGLE_DRAWER:\n      return {\n        ...state,\n        open: !state.open\n      };\n    default:\n      return state;\n  }\n}\n\nexport default drawerReducer;","import { combineReducers } from 'redux';\n\nimport plannerReducer from './planner/planner.reducer';\nimport drawerReducer from './drawer/drawer.reducer';\n\nconst rootReducer = combineReducers({\n  planner: plannerReducer,\n  drawer: drawerReducer\n});\n\nexport default rootReducer;","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport PlannerActionTypes from './planner.types';\nimport { autocompleteFailure, autocompleteSuccess, directionsFailure, directionsSuccess } from './planner.actions';\n\n\nfunction* autocomplete({ payload: { input, source } }) {\n  if (input === \"\") {\n    yield put(autocompleteSuccess([]));\n  } else {\n    const service = new window.google.maps.places.AutocompleteService();\n    const promise = new Promise((resolve, reject) => {\n      service.getPlacePredictions({ input: input, location: new window.google.maps.LatLng({ lat: 53.4321, lng: -6.2759 }), radius: 11000 }, (predictions, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(predictions);\n        } else {\n          reject(status);\n        }\n      })\n    });\n\n    try {\n      const response = yield promise;\n      const places = response\n        .filter(places => places.description.includes('Dublin'));\n\n      yield put(autocompleteSuccess(places, source));\n    } catch(error) {\n      yield put(autocompleteFailure(error));\n    }\n  }\n}\n\nfunction* getDirections({ payload: { origin, dest } }) {\n  const directionsService = new window.google.maps.DirectionsService();\n  const promise = new Promise((resolve, reject) => {\n       directionsService.route({origin: origin, destination: dest, travelMode: 'TRANSIT', provideRouteAlternatives: true, transitOptions: {modes: ['BUS']}, region: 'ie'},\n         (response, status) => {\n            if (status === 'OK') {\n              resolve(response);\n            } else {\n              reject(status);\n            }\n         });\n  });\n\n  try {\n    const routes = yield promise;\n    yield call(console.log, routes);\n    yield put(directionsSuccess(routes));\n  } catch (error) {\n    yield put(directionsFailure(error));\n  }\n}\n\nexport function* onAutoCompleteStart() {\n  yield takeLatest(PlannerActionTypes.AUTOCOMPLETE_START, autocomplete);\n}\n\nexport function* onDirectionsStart() {\n  yield takeLatest(PlannerActionTypes.DIRECTIONS_START, getDirections);\n}\n\nexport function* plannerSagas() {\n  yield all([call(onAutoCompleteStart), call(onDirectionsStart)]);\n}","import { all, call } from 'redux-saga/effects';\nimport { plannerSagas } from './planner/planner.sagas';\n\nfunction* rootSaga() {\n  yield all([call(plannerSagas)]);\n}\n\nexport default rootSaga;","import createSagaMiddleware from 'redux-saga';\n\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport  { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n","import DrawerActionTypes from './drawer.types';\n\nexport const toggleDrawer = () => ({\n  type: DrawerActionTypes.TOGGLE_DRAWER\n});","const DrawerActionTypes = {\n  TOGGLE_DRAWER: 'TOGGLE_DRAWER'\n};\n\nexport default DrawerActionTypes;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { selectDrawerOpen } from '../../redux/drawer/drawer.selectors';\nimport { toggleDrawer } from '../../redux/drawer/drawer.action';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport BookmarksIcon from '@material-ui/icons/Bookmarks';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  }\n});\n\nfunction LeftDrawer(props) {\n  const { open, toggleDrawer } = props;\n\n  const classes = useStyles();\n\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  const list = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer}\n      onKeyDown={toggleDrawer}\n    >\n      <List>\n        <ListItem button>\n          <ListItemIcon>\n            <BookmarksIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Saved\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <AccessTimeIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Timetables\" />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n\n  const anchor = 'left';\n  return (\n      <React.Fragment>\n        <SwipeableDrawer\n          anchor={'left'}\n          open={open}\n          onClose={toggleDrawer}\n          onOpen={toggleDrawer}\n          disableBackdropTransition={!iOS}\n          disableDiscovery={iOS}\n        >\n          {list()}\n        </SwipeableDrawer>\n      </React.Fragment>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  open: selectDrawerOpen\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDrawer: () => dispatch(toggleDrawer())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftDrawer);","import { createSelector } from 'reselect';\n\nconst selectDrawer = state => state.drawer;\n\nexport const selectDrawerOpen = createSelector(\n  [selectDrawer],\n  drawer => drawer.open\n);"],"sourceRoot":""}