{"version":3,"sources":["components/header/header.component.jsx","redux/planner/planner.types.js","redux/planner/planner.actions.js","redux/planner/planner.reducer.js","redux/planner/planner.selector.js","components/form-input/form-input.component.jsx","components/map-container/map-container.component.jsx","components/route-card/route-card.component.jsx","pages/homepage/homepage.component.jsx","App.js","redux/root-reducer.js","redux/planner/planner.sagas.js","redux/root-saga.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","tabContainer","marginLeft","appBar","height","Header","classes","AppBar","position","className","Toolbar","Hidden","smUp","IconButton","edge","Typography","variant","Tabs","value","Tab","label","PlannerActionTypes","AUTOCOMPLETE_START","AUTOCOMPLETE_SUCCESS","AUTOCOMPLETE_FAILURE","SET_ORIGIN","SET_DEST","DIRECTIONS_START","DIRECTIONS_SUCCESS","DIRECTIONS_FAILURE","autocompleteSuccess","places","source","type","payload","INITIAL_STATE","originList","destList","origin","dest","directions","plannerReducer","state","action","selectPlanner","planner","selectOriginPlaces","createSelector","selectOriginPredictions","map","place","description","selectDestPlaces","selectDestPredictions","selectOrigin","selectDest","selectDirections","selectRoutes","routes","selectPolylines","route","overview_path","path","lat","lng","mapStateToProps","createStructuredSelector","originPredictions","destPredictions","connect","dispatch","startAutocomplete","input","autocompleteStart","setOrigin","setDest","startDirections","directionsStart","props","Card","Grid","container","direction","alignItems","spacing","item","xs","Autocomplete","options","renderInput","params","TextField","onInputChange","event","Button","color","onClick","containerStyle","width","center","polylines","google","window","initialCenter","zoom","polyline","index","key","RouteCard","steps","CardContent","step","instructions","travel_mode","transit","line","short_name","stepToDescription","sm","legs","xsDown","App","Fragment","CssBaseline","component","HomePage","rootReducer","combineReducers","autocomplete","getDirections","onAutoCompleteStart","onDirectionsStart","plannerSagas","put","service","maps","AutocompleteService","promise","Promise","resolve","reject","getPlacePredictions","location","LatLng","radius","predictions","status","PlacesServiceStatus","OK","response","filter","includes","error","directionsService","DirectionsService","destination","travelMode","provideRouteAlternatives","transitOptions","modes","region","call","console","log","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29a9d26e.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, IconButton, Toolbar, Typography, Hidden, Tabs, Tab, makeStyles } from '@material-ui/core';\nimport  MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles({\n  tabContainer: {\n    marginLeft: 'auto'\n  },\n  appBar: {\n    height: '70px'\n  }\n});\n\nfunction Header() {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\" className={classes.appBar}>\n      <Toolbar>\n        <Hidden smUp>\n          <IconButton edge=\"start\">\n            <MenuIcon />\n          </IconButton>\n        </Hidden>\n        <Typography variant=\"h6\">Dublin Bus</Typography>\n        <Tabs value={false} className={classes.tabContainer}>\n          <Tab label=\"Saved Routes\"/>\n          <Tab label=\"Timetable\"/>\n        </Tabs>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;","const PlannerActionTypes = {\n  AUTOCOMPLETE_START: 'AUTOCOMPLETE_START',\n  AUTOCOMPLETE_SUCCESS: 'AUTOCOMPLETE_SUCCESS',\n  AUTOCOMPLETE_FAILURE: 'AUTOCOMPLETE_FAILURE',\n  SET_ORIGIN: 'SET_ORIGIN',\n  SET_DEST: 'SET_DEST',\n  DIRECTIONS_START: 'DIRECTIONS_START',\n  DIRECTIONS_SUCCESS: 'DIRECTIONS_SUCCESS',\n  DIRECTIONS_FAILURE: 'DIRECTIONS_FAILURE',\n};\n\nexport default PlannerActionTypes;","import PlannerActionTypes from './planner.types';\n\nexport const autocompleteStart = (input, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_START,\n  payload: { input, source }\n});\n\nexport const autocompleteSuccess = (places, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_SUCCESS,\n  payload: { places, source }\n});\n\nexport const autocompleteFailure = error => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_FAILURE,\n  payload: error\n});\n\nexport const setOrigin = origin => ({\n  type: PlannerActionTypes.SET_ORIGIN,\n  payload: origin\n});\n\nexport const setDest = dest => ({\n  type: PlannerActionTypes.SET_DEST,\n  payload: dest\n});\n\nexport const directionsStart = (origin, dest) => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: {\n    origin: origin,\n    dest: dest\n  }\n});\n\nexport const directionsSuccess = directions => ({\n  type: PlannerActionTypes.DIRECTIONS_SUCCESS,\n  payload: directions\n});\n\nexport const directionsFailure = error => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: error\n});\n","import PlannerActionTypes from './planner.types';\n\nconst INITIAL_STATE = {\n  originList: [],\n  destList: [],\n  origin: '',\n  dest: '',\n  directions: null,\n};\n\nconst plannerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PlannerActionTypes.AUTOCOMPLETE_SUCCESS:\n      if (action.payload.source === 'origin') {\n        return {\n          ...state,\n          originList: action.payload.places\n        }\n      } else {\n        return {\n          ...state,\n          destList: action.payload.places\n        }\n      }\n    case PlannerActionTypes.SET_ORIGIN:\n      return {\n        ...state,\n        origin: action.payload\n      };\n    case PlannerActionTypes.SET_DEST:\n      return {\n        ...state,\n        dest: action.payload\n      };\n    case PlannerActionTypes.DIRECTIONS_SUCCESS:\n      return {\n        ...state,\n        directions: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default plannerReducer;\n","import { createSelector } from 'reselect';\nimport plannerReducer from './planner.reducer';\n\nconst selectPlanner = state => state.planner;\n\nexport const selectOriginPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.originList\n);\n\nexport const selectOriginPredictions = createSelector(\n  [selectOriginPlaces],\nplaces => places.map(place => place.description)\n);\n\nexport const selectDestPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.destList\n);\n\nexport const selectDestPredictions = createSelector(\n  [selectDestPlaces],\n  places => places.map(place => place.description)\n);\n\nexport const selectOrigin = createSelector(\n  [selectPlanner],\n  planner => planner.origin\n);\n\nexport const selectDest = createSelector(\n  [selectPlanner],\n  planner => planner.dest\n);\n\nexport const selectDirections = createSelector(\n  [selectPlanner] ,\n  planner => planner.directions\n);\n\nexport const selectRoutes = createSelector(\n  [selectDirections],\n  directions => (directions ? directions.routes : [])\n);\n\nexport const selectPolylines = createSelector(\n  [selectRoutes],\n  routes => routes.map(route => route.overview_path.map(path => ({ lat: path.lat(), lng: path.lng() })))\n);","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { autocompleteStart, setDest, setOrigin, directionsStart } from '../../redux/planner/planner.actions';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  selectDest, selectDestPredictions,\n  selectOrigin,\n  selectOriginPredictions,\n} from '../../redux/planner/planner.selector';\nimport Card from '@material-ui/core/Card';\n\nfunction FormInput(props) {\n  const { startAutocomplete, setOrigin, setDest, originPredictions, destPredictions, startDirections, origin, dest } = props;\n\n  function originHandler(event, value) {\n    setOrigin(value);\n    startAutocomplete(value, 'origin');\n  }\n\n  function destHandler(event, value) {\n    setDest(value);\n    startAutocomplete(value, 'dest');\n  }\n\n  return (\n    <Card variant=\"outlined\">\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n          <Grid container item alignItems=\"center\">\n            <Grid container item xs={10} direction=\"column\">\n              <Autocomplete\n                options={originPredictions}\n                renderInput={params => <TextField {...params}/> }\n                onInputChange={originHandler}\n              />\n              <Autocomplete\n                options={destPredictions}\n                renderInput={params => <TextField {...params}/> }\n                onInputChange={destHandler}\n              />\n            </Grid>\n            <Grid item xs={2}>\n              <Button>\n                <ImportExportIcon />\n              </Button>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\"\n              color=\"primary\"\n              onClick={() => startDirections(origin, dest)}>\n              Submit\n            </Button>\n          </Grid>\n        </Grid>\n    </Card>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  originPredictions: selectOriginPredictions,\n  destPredictions: selectDestPredictions,\n  origin: selectOrigin,\n  dest: selectDest\n});\n\nconst mapDispatchToProps = dispatch => ({\n   startAutocomplete: (input, source) => dispatch(autocompleteStart(input, source)),\n   setOrigin: origin => dispatch(setOrigin(origin)),\n   setDest : dest => dispatch(setDest(dest)),\n   startDirections: (origin, dest) => dispatch(directionsStart(origin, dest)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormInput);","import React from 'react';\n\n// import { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { GoogleApiWrapper, Map, Polyline } from 'google-maps-react';\nimport { createStructuredSelector } from 'reselect';\nimport { selectPolylines } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\n\n// const apiKey = 'AIzaSyBPyIqf7hOMSCjqSq--50UKiJ9Xzmbssmk';\n\nconst containerStyle = {\n  width: '75vw',\n  height: 'calc(100vh - 70px)',\n  position: 'absolute',\n};\n\nconst center = {\n  lat: 53.3363,\n  lng: -6.2769\n};\n\n\nfunction MapContainer(props) {\n  const { polylines } = props;\n  return(\n    <Map google={window.google} containerStyle={containerStyle} initialCenter={center} zoom={13}>\n      { polylines.map((polyline, index) => <Polyline key={index} path={polyline} />) }\n    </Map>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  polylines: selectPolylines\n});\n\nexport default connect(mapStateToProps)(MapContainer);\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nfunction RouteCard(props) {\n  const { steps } = props;\n\n  function stepToDescription(step) {\n    let instructions = step.instructions;\n    if (step.travel_mode==='TRANSIT') {\n      instructions += ', ' + step.transit.line.short_name;\n    }\n    return instructions;\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        { steps.map((step, index) => (<Typography key={index}>{stepToDescription(step)}</Typography>)) }\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default RouteCard;","import React from 'react';\nimport FormInput from '../../components/form-input/form-input.component';\nimport Grid from '@material-ui/core/Grid';\nimport MapContainer from '../../components/map-container/map-container.component';\nimport Hidden from '@material-ui/core/Hidden';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRoutes } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\nimport RouteCard from '../../components/route-card/route-card.component';\n\nfunction HomePage(props) {\n  const { routes } = props;\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={3}>\n        <FormInput />\n        { routes.map((route, index) => (<RouteCard key={index} steps={route.legs[0].steps}/>) ) }\n      </Grid>\n      <Hidden xsDown>\n        <Grid item xs=\"auto\">\n          <MapContainer />\n      </Grid>\n      </Hidden>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  routes: selectRoutes,\n});\n\nexport default connect(mapStateToProps)(HomePage);","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { CssBaseline } from '@material-ui/core';\n\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={HomePage} />\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport plannerReducer from './planner/planner.reducer';\n\nconst rootReducer = combineReducers({\n  planner: plannerReducer\n});\n\nexport default rootReducer;","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport PlannerActionTypes from './planner.types';\nimport { autocompleteFailure, autocompleteSuccess, directionsFailure, directionsSuccess } from './planner.actions';\n\n\nfunction* autocomplete({ payload: { input, source } }) {\n  if (input === \"\") {\n    yield put(autocompleteSuccess([]));\n  } else {\n    const service = new window.google.maps.places.AutocompleteService();\n    const promise = new Promise((resolve, reject) => {\n      service.getPlacePredictions({ input: input, location: new window.google.maps.LatLng({ lat: 53.4321, lng: -6.2759 }), radius: 11000 }, (predictions, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(predictions);\n        } else {\n          reject(status);\n        }\n      })\n    });\n\n    try {\n      const response = yield promise;\n      const places = response\n        .filter(places => places.description.includes('Dublin'));\n\n      yield put(autocompleteSuccess(places, source));\n    } catch(error) {\n      yield put(autocompleteFailure(error));\n    }\n  }\n}\n\nfunction* getDirections({ payload: { origin, dest } }) {\n  const directionsService = new window.google.maps.DirectionsService();\n  const promise = new Promise((resolve, reject) => {\n       directionsService.route({origin: origin, destination: dest, travelMode: 'TRANSIT', provideRouteAlternatives: true, transitOptions: {modes: ['BUS']}, region: 'ie'},\n         (response, status) => {\n            if (status === 'OK') {\n              resolve(response);\n            } else {\n              reject(status);\n            }\n         });\n  });\n\n  try {\n    const routes = yield promise;\n    yield call(console.log, routes);\n    yield put(directionsSuccess(routes));\n  } catch (error) {\n    yield put(directionsFailure(error));\n  }\n}\n\nexport function* onAutoCompleteStart() {\n  yield takeLatest(PlannerActionTypes.AUTOCOMPLETE_START, autocomplete);\n}\n\nexport function* onDirectionsStart() {\n  yield takeLatest(PlannerActionTypes.DIRECTIONS_START, getDirections);\n}\n\nexport function* plannerSagas() {\n  yield all([call(onAutoCompleteStart), call(onDirectionsStart)]);\n}","import { all, call } from 'redux-saga/effects';\nimport { plannerSagas } from './planner/planner.sagas';\n\nfunction* rootSaga() {\n  yield all([call(plannerSagas)]);\n}\n\nexport default rootSaga;","import createSagaMiddleware from 'redux-saga';\n\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport  { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}