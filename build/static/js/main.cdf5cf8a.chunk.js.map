{"version":3,"sources":["components/header/header.component.jsx","redux/planner/planner.types.js","redux/planner/planner.actions.js","redux/planner/planner.reducer.js","redux/planner/planner.selector.js","components/form-input/form-input.component.jsx","components/map-container/map-container.component.jsx","components/route-card/route-card.component.jsx","pages/homepage/homepage.component.jsx","App.js","redux/root-reducer.js","redux/planner/planner.sagas.js","redux/root-saga.js","redux/store.js","index.js","components/left-drawer/left-drawer.component.jsx"],"names":["makeStyles","tabContainer","marginLeft","appBar","height","Header","PlannerActionTypes","AUTOCOMPLETE_START","AUTOCOMPLETE_SUCCESS","AUTOCOMPLETE_FAILURE","SET_ORIGIN","SET_DEST","DIRECTIONS_START","DIRECTIONS_SUCCESS","DIRECTIONS_FAILURE","autocompleteSuccess","places","source","type","payload","INITIAL_STATE","originList","destList","origin","dest","directions","plannerReducer","state","action","selectPlanner","planner","selectOriginPlaces","createSelector","selectOriginPredictions","map","place","description","selectDestPlaces","selectDestPredictions","selectOrigin","selectDest","selectDirections","selectRoutes","routes","selectPolylines","route","overview_path","path","lat","lng","mapStateToProps","createStructuredSelector","originPredictions","destPredictions","connect","dispatch","startAutocomplete","input","autocompleteStart","setOrigin","setDest","startDirections","directionsStart","props","Card","variant","Grid","container","direction","alignItems","spacing","item","xs","Autocomplete","options","renderInput","params","TextField","onInputChange","event","value","Button","color","onClick","containerStyle","position","width","zIndex","center","polylines","google","window","initialCenter","zoom","disableDefaultUI","polyline","index","key","RouteCard","steps","CardContent","step","Typography","instructions","travel_mode","transit","line","short_name","stepToDescription","Paper","elevation","style","legs","Hidden","xsDown","App","useState","Fragment","CssBaseline","rootReducer","combineReducers","autocomplete","getDirections","onAutoCompleteStart","onDirectionsStart","plannerSagas","put","service","maps","AutocompleteService","promise","Promise","resolve","reject","getPlacePredictions","location","LatLng","radius","predictions","status","PlacesServiceStatus","OK","response","filter","includes","error","directionsService","DirectionsService","destination","travelMode","provideRouteAlternatives","transitOptions","modes","region","call","console","log","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","useStyles","list","classes","React","top","left","bottom","right","setState","toggleDrawer","anchor","open","iOS","process","browser","test","navigator","userAgent","onClose","onOpen","disableBackdropTransition","disableDiscovery","className","role","onKeyDown","button","primary"],"mappings":"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","file":"static/js/main.cdf5cf8a.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, IconButton, Toolbar, Typography, Hidden, Tabs, Tab, makeStyles } from '@material-ui/core';\nimport  MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles({\n  tabContainer: {\n    marginLeft: 'auto'\n  },\n  appBar: {\n    height: '70px'\n  }\n});\n\nfunction Header() {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"sticky\" className={classes.appBar}>\n      <Toolbar>\n          <IconButton edge=\"start\">\n            <MenuIcon />\n          </IconButton>\n        <Typography variant=\"h6\">Dublin Bus</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;","const PlannerActionTypes = {\n  AUTOCOMPLETE_START: 'AUTOCOMPLETE_START',\n  AUTOCOMPLETE_SUCCESS: 'AUTOCOMPLETE_SUCCESS',\n  AUTOCOMPLETE_FAILURE: 'AUTOCOMPLETE_FAILURE',\n  SET_ORIGIN: 'SET_ORIGIN',\n  SET_DEST: 'SET_DEST',\n  DIRECTIONS_START: 'DIRECTIONS_START',\n  DIRECTIONS_SUCCESS: 'DIRECTIONS_SUCCESS',\n  DIRECTIONS_FAILURE: 'DIRECTIONS_FAILURE',\n};\n\nexport default PlannerActionTypes;","import PlannerActionTypes from './planner.types';\n\nexport const autocompleteStart = (input, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_START,\n  payload: { input, source }\n});\n\nexport const autocompleteSuccess = (places, source) => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_SUCCESS,\n  payload: { places, source }\n});\n\nexport const autocompleteFailure = error => ({\n  type: PlannerActionTypes.AUTOCOMPLETE_FAILURE,\n  payload: error\n});\n\nexport const setOrigin = origin => ({\n  type: PlannerActionTypes.SET_ORIGIN,\n  payload: origin\n});\n\nexport const setDest = dest => ({\n  type: PlannerActionTypes.SET_DEST,\n  payload: dest\n});\n\nexport const directionsStart = (origin, dest) => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: {\n    origin: origin,\n    dest: dest\n  }\n});\n\nexport const directionsSuccess = directions => ({\n  type: PlannerActionTypes.DIRECTIONS_SUCCESS,\n  payload: directions\n});\n\nexport const directionsFailure = error => ({\n  type: PlannerActionTypes.DIRECTIONS_START,\n  payload: error\n});\n","import PlannerActionTypes from './planner.types';\n\nconst INITIAL_STATE = {\n  originList: [],\n  destList: [],\n  origin: '',\n  dest: '',\n  directions: null,\n};\n\nconst plannerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PlannerActionTypes.AUTOCOMPLETE_SUCCESS:\n      if (action.payload.source === 'origin') {\n        return {\n          ...state,\n          originList: action.payload.places\n        }\n      } else {\n        return {\n          ...state,\n          destList: action.payload.places\n        }\n      }\n    case PlannerActionTypes.SET_ORIGIN:\n      return {\n        ...state,\n        origin: action.payload\n      };\n    case PlannerActionTypes.SET_DEST:\n      return {\n        ...state,\n        dest: action.payload\n      };\n    case PlannerActionTypes.DIRECTIONS_SUCCESS:\n      return {\n        ...state,\n        directions: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default plannerReducer;\n","import { createSelector } from 'reselect';\nimport plannerReducer from './planner.reducer';\n\nconst selectPlanner = state => state.planner;\n\nexport const selectOriginPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.originList\n);\n\nexport const selectOriginPredictions = createSelector(\n  [selectOriginPlaces],\nplaces => places.map(place => place.description)\n);\n\nexport const selectDestPlaces = createSelector(\n  [selectPlanner],\n  planner => planner.destList\n);\n\nexport const selectDestPredictions = createSelector(\n  [selectDestPlaces],\n  places => places.map(place => place.description)\n);\n\nexport const selectOrigin = createSelector(\n  [selectPlanner],\n  planner => planner.origin\n);\n\nexport const selectDest = createSelector(\n  [selectPlanner],\n  planner => planner.dest\n);\n\nexport const selectDirections = createSelector(\n  [selectPlanner] ,\n  planner => planner.directions\n);\n\nexport const selectRoutes = createSelector(\n  [selectDirections],\n  directions => (directions ? directions.routes : [])\n);\n\nexport const selectPolylines = createSelector(\n  [selectRoutes],\n  routes => routes.map(route => route.overview_path.map(path => ({ lat: path.lat(), lng: path.lng() })))\n);","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { autocompleteStart, setDest, setOrigin, directionsStart } from '../../redux/planner/planner.actions';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  selectDest, selectDestPredictions,\n  selectOrigin,\n  selectOriginPredictions,\n} from '../../redux/planner/planner.selector';\nimport Card from '@material-ui/core/Card';\n\nfunction FormInput(props) {\n  const { startAutocomplete, setOrigin, setDest, originPredictions, destPredictions, startDirections, origin, dest } = props;\n\n  function originHandler(event, value) {\n    setOrigin(value);\n    startAutocomplete(value, 'origin');\n  }\n\n  function destHandler(event, value) {\n    setDest(value);\n    startAutocomplete(value, 'dest');\n  }\n\n  return (\n    <Card variant=\"outlined\">\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n          <Grid container item alignItems=\"center\">\n            <Grid container item xs={10} direction=\"column\">\n              <Autocomplete\n                options={originPredictions}\n                renderInput={params => <TextField {...params}/> }\n                onInputChange={originHandler}\n              />\n              <Autocomplete\n                options={destPredictions}\n                renderInput={params => <TextField {...params}/> }\n                onInputChange={destHandler}\n              />\n            </Grid>\n            <Grid item xs={2}>\n              <Button>\n                <ImportExportIcon />\n              </Button>\n            </Grid>\n          </Grid>\n          <Grid item>\n\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\"\n              color=\"primary\"\n              onClick={() => startDirections(origin, dest)}>\n              Submit\n            </Button>\n          </Grid>\n        </Grid>\n    </Card>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  originPredictions: selectOriginPredictions,\n  destPredictions: selectDestPredictions,\n  origin: selectOrigin,\n  dest: selectDest\n});\n\nconst mapDispatchToProps = dispatch => ({\n   startAutocomplete: (input, source) => dispatch(autocompleteStart(input, source)),\n   setOrigin: origin => dispatch(setOrigin(origin)),\n   setDest : dest => dispatch(setDest(dest)),\n   startDirections: (origin, dest) => dispatch(directionsStart(origin, dest)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormInput);","import React from 'react';\n\n// import { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { GoogleApiWrapper, Map, Polyline } from 'google-maps-react';\nimport { createStructuredSelector } from 'reselect';\nimport { selectPolylines } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\n\n// const apiKey = 'AIzaSyBPyIqf7hOMSCjqSq--50UKiJ9Xzmbssmk';\n\nconst containerStyle = {\n  position: 'fixed',\n  height: '100vh',\n  width: '100vw',\n  zIndex: -1\n};\n\nconst center = {\n  lat: 53.3363,\n  lng: -6.2769\n};\n\n\nfunction MapContainer(props) {\n  const { polylines } = props;\n  return(\n    <Map google={window.google} containerStyle={containerStyle} initialCenter={center} zoom={13} disableDefaultUI={true}>\n      { polylines.map((polyline, index) => <Polyline key={index} path={polyline} />) }\n    </Map>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  polylines: selectPolylines\n});\n\nexport default connect(mapStateToProps)(MapContainer);\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\n\nfunction RouteCard(props) {\n  const { steps } = props;\n\n  function stepToDescription(step) {\n    let instructions = step.instructions;\n    if (step.travel_mode==='TRANSIT') {\n      instructions += ', ' + step.transit.line.short_name;\n    }\n    return instructions;\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        { steps.map((step, index) => (<Typography key={index}>{stepToDescription(step)}</Typography>)) }\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default RouteCard;","import React from 'react';\nimport FormInput from '../../components/form-input/form-input.component';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport MapContainer from '../../components/map-container/map-container.component';\nimport Hidden from '@material-ui/core/Hidden';\nimport { createStructuredSelector } from 'reselect';\nimport { selectRoutes } from '../../redux/planner/planner.selector';\nimport { connect } from 'react-redux';\nimport RouteCard from '../../components/route-card/route-card.component';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport LeftDrawer from '../../components/left-drawer/left-drawer.component';\n\n\n\nfunction HomePage(props) {\n  const { routes } = props;\n  return (\n    <>\n      <Paper elevation={10} style={{width: '400px', position: 'fixed', height: '100vh'}}>\n        <LeftDrawer />\n          <FormInput/>\n          { routes.map((route, index) => (<RouteCard key={index} steps={route.legs[0].steps}/>) ) }\n      </Paper>\n      <Hidden xsDown>\n        <MapContainer />\n      </Hidden>\n      </>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  routes: selectRoutes,\n});\n\nexport default connect(mapStateToProps)(HomePage);","import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { CssBaseline } from '@material-ui/core';\n\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport MapContainer from './components/map-container/map-container.component';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormInput from './components/form-input/form-input.component';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LeftDrawer from './components/left-drawer/left-drawer.component';\n\nfunction App() {\n  const [open, setOpen] = useState(true);\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HomePage />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport plannerReducer from './planner/planner.reducer';\n\nconst rootReducer = combineReducers({\n  planner: plannerReducer\n});\n\nexport default rootReducer;","import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport PlannerActionTypes from './planner.types';\nimport { autocompleteFailure, autocompleteSuccess, directionsFailure, directionsSuccess } from './planner.actions';\n\n\nfunction* autocomplete({ payload: { input, source } }) {\n  if (input === \"\") {\n    yield put(autocompleteSuccess([]));\n  } else {\n    const service = new window.google.maps.places.AutocompleteService();\n    const promise = new Promise((resolve, reject) => {\n      service.getPlacePredictions({ input: input, location: new window.google.maps.LatLng({ lat: 53.4321, lng: -6.2759 }), radius: 11000 }, (predictions, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(predictions);\n        } else {\n          reject(status);\n        }\n      })\n    });\n\n    try {\n      const response = yield promise;\n      const places = response\n        .filter(places => places.description.includes('Dublin'));\n\n      yield put(autocompleteSuccess(places, source));\n    } catch(error) {\n      yield put(autocompleteFailure(error));\n    }\n  }\n}\n\nfunction* getDirections({ payload: { origin, dest } }) {\n  const directionsService = new window.google.maps.DirectionsService();\n  const promise = new Promise((resolve, reject) => {\n       directionsService.route({origin: origin, destination: dest, travelMode: 'TRANSIT', provideRouteAlternatives: true, transitOptions: {modes: ['BUS']}, region: 'ie'},\n         (response, status) => {\n            if (status === 'OK') {\n              resolve(response);\n            } else {\n              reject(status);\n            }\n         });\n  });\n\n  try {\n    const routes = yield promise;\n    yield call(console.log, routes);\n    yield put(directionsSuccess(routes));\n  } catch (error) {\n    yield put(directionsFailure(error));\n  }\n}\n\nexport function* onAutoCompleteStart() {\n  yield takeLatest(PlannerActionTypes.AUTOCOMPLETE_START, autocomplete);\n}\n\nexport function* onDirectionsStart() {\n  yield takeLatest(PlannerActionTypes.DIRECTIONS_START, getDirections);\n}\n\nexport function* plannerSagas() {\n  yield all([call(onAutoCompleteStart), call(onDirectionsStart)]);\n}","import { all, call } from 'redux-saga/effects';\nimport { plannerSagas } from './planner/planner.sagas';\n\nfunction* rootSaga() {\n  yield all([call(plannerSagas)]);\n}\n\nexport default rootSaga;","import createSagaMiddleware from 'redux-saga';\n\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport  { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { IconButton, Toolbar } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  }\n});\n\nfunction LeftDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  const list = (anchor) => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n          <ListItem button>\n            <ListItemIcon><InboxIcon /> </ListItemIcon>\n            <ListItemText primary=\"Saved Routes\" />\n          </ListItem>\n        <ListItem button>\n          <ListItemIcon><InboxIcon /> </ListItemIcon>\n          <ListItemText primary=\"Timetables\" />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n\n  const anchor = 'left';\n  return (\n    <div>\n        <React.Fragment>\n          <IconButton onClick={toggleDrawer('left', true)}>\n            <MenuIcon />\n          </IconButton>\n          <SwipeableDrawer\n            anchor={anchor}\n            open={state[anchor]}\n            onClose={toggleDrawer(anchor, false)}\n            onOpen={toggleDrawer(anchor, true)}\n            disableBackdropTransition={!iOS}\n            disableDiscovery={iOS}\n          >\n            {list(anchor)}\n          </SwipeableDrawer>\n        </React.Fragment>\n    </div>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftDrawer);"],"sourceRoot":""}